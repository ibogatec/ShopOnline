@implements IDisposable;
@inject IShoppingCartService ShoppingCartService;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""><span class="fas fa-shopping-cart"></span>&nbsp;&nbsp;&nbsp;ShopOnline</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="fas fa-home" aria-hidden="true"></span>&nbsp;&nbsp;&nbsp;Home
            </NavLink>
        </div>

        <ProductCategoriesNavMenu />

        <div class="nav-item px-3 d-sm-none">
            <NavLink class="nav-link" href="ShoppingCart">
                <span class="oi oi-cart" aria-hidden="true"></span> Shopping Cart (@shoppingCartItemsCount)
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private int shoppingCartItemsCount = 0;

    protected override async Task OnInitializedAsync()
    {
        shoppingCartItemsCount = (await ShoppingCartService.GetUserItemsAsync(1)).Sum(i => i.Qty);

        ShoppingCartService.ShoppingCartChanged += ShoppingCartChanged;
    }

    protected void ShoppingCartChanged(int totalQty)
    {
        shoppingCartItemsCount = totalQty;

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        ShoppingCartService.ShoppingCartChanged -= ShoppingCartChanged;
    }
}
